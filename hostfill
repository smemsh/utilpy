#!/usr/bin/env python3
"""
"""
__url__     = 'https://github.com/smemsh/utilpy/'
__author__  = 'Scott Mcdermott <scott@smemsh.net>'
__license__ = 'GPL-2.0'

from sys import exit, hexversion
if hexversion < 0x030900f0: exit("minpython: %s" % hexversion)

from re import sub
from sys import argv, stdin, stdout, stderr, maxsize
from select import select
from socket import gethostbyaddr, herror
from traceback import print_exc
from subprocess import check_output

from os.path import basename
from os import (
    getenv, unsetenv,
    isatty, dup,
    close as osclose,
    EX_OK as EXIT_SUCCESS,
    EX_SOFTWARE as EXIT_FAILURE,
)

###

def err(*args, **kwargs):
    print(*args, file=stderr, **kwargs)

def bomb(*args, **kwargs):
    err(*args, **kwargs)
    exit(EXIT_FAILURE)

###

def main():

    def host2ip(match):
        match = match.group(0)
        try: m = gethostbyaddr(match)
        except herror: return match
        if isinstance(m, tuple):
            # [0] hostname str, [1] alias list, [2] addr list
            length = maxsize
            for a in m[1] + [m[0]]:
                # for display, use shortest alias
                if (n := len(a)) < length:
                    length = n
                    shortest = a
            m = shortest
        return m

    if debug == 1:
        breakpoint()

    for line in infile:
        line = line[:-1]  # newline
        print(sub(r'\b((\d{1,3}\.){3}\d{1,3})\b', host2ip, line))


###

if __name__ == "__main__":

    invname = basename(argv[0])

    # move stdin, pdb needs stdio fds itself
    stdinfd = stdin.fileno()
    if not isatty(stdinfd) and select([stdin], [], [])[0]:
        infile = open(dup(stdinfd))
        osclose(stdinfd) # cpython bug 73582
        try: stdin = open('/dev/tty')
        except: pass # no ctty, but then pdb would not be in use
    else:
        bomb("must supply input on stdin")

    from bdb import BdbQuit
    if debug := int(getenv('DEBUG') or 0):
        import pdb
        from pprint import pp
        err('debug: enabled')
        unsetenv('DEBUG') # otherwise forked children hang

    try: main()
    except BdbQuit: bomb("debug: stop")
    except SystemExit: raise
    except KeyboardInterrupt: bomb("interrupted")
    except:
        print_exc(file=stderr)
        if debug: pdb.post_mortem()
        else: bomb("aborting...")
    finally: # cpython bug 55589
        try: stdout.flush()
        finally:
            try: stdout.close()
            finally:
                try: stderr.flush()
                except: pass
                finally: stderr.close()
