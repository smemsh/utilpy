#!/usr/bin/env python3
#
# count
#   counts lines in the standard input, or the given files
#
# desc:
#   - equivalent to wc -l (different output format if files given)
#   - 10x slower than C version (wc -l) in measurements
#
# status:
#   - experiment to determine python's speed with simple IO loop + counter
#   - not very fast! using mmap supposedly doubles, but still... unimpressive
#   - learning python
#
# scott@smemsh.net
# https://github.com/smemsh/utilpy/
# http://spdx.org/licenses/GPL-2.0
#
##############################################################################
"""
count lines in files
    counts number of lines on stdin, or:
    if args supplied, gives "filename: count" for each
"""

from sys import argv, stdin
from os import environ

###

def usagex():

    print("{}:".format(invname), __doc__.strip())
    quit()

###

def countlines(file):

    count = 0
    for _ in file:
        count += 1
    return count

###

def main():

    no_more_options = False

    if (nargs == 0):
        print(countlines(stdin))

    else:
        files = []
        for arg in args:

            if (no_more_options):
                files.append(arg); continue

            elif (arg == '--'):
                no_more_options = True; continue

            elif (arg == '-h' or arg == '--help'):
                usagex()

            elif (arg[0] == '-'):
                print("{}: opterr".format(invname)); quit()

            else:
                files.append(arg)
                no_more_options = True

        for file in files:

            try:
                with open(file, "rb") as f:
                    count = countlines(f)
                    print('{}: {}'.format(file, count))

            except FileNotFoundError:
                print("{}: {}: nsfod".format(invname, file))
                raise

            except:
                print("{}: unhandled".format(invname))
                raise
###

if (__name__ == "__main__"):

    try:
        if (bool(environ['DEBUG'])):
            debug = True
            import pdb
            from pprint import pprint as pp
            pp('debug-mode-enabled')
            pdb.set_trace()
        else:
            raise KeyError

    except KeyError:
        debug = False

    invname = argv[0]
    args = argv[1:]
    nargs = len(args)

    main()
#
