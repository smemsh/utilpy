#!/usr/bin/env python3
#
# passgen
#   output random 128-bit password from [[:alnum:]] ^ [0Ol1I]
#
# desc:
#   - generates a random password with specifiable entropy
#   - chars: a-z, A-Z, 0-9, except: 0, O, l, 1, I (== 57 possible)
#   - default 22 char password (~128 bits entropy using our charset)
#   - uses python random.SystemRandom (on linux, os.urandom())
#   - uses random.choice() to map into range of suitable characters
#
# calc:
#   - passlen = 22
#   - setsize = len([[:alnum:]]) - 5 # ([^0Ol1I])
#             = 26 + 26 + 10 - 5 = 57
#   - entropy = log2(setsize^passlen)
#             = log2(setsize) * passlen
#             = passlen * (ln(setsize) / ln(2))
#             = 22 * (ln(57) / ln(2))
#             = 128.3235803212
# also:
#   - https://en.wikipedia.org/wiki/Password_strength
#
# todo:
#   - allow to specify length instead of computing by entropy
#   - allow to specify character set
#
# scott@smemsh.net
# http://smemsh.net/src/utilpy/
# http://spdx.org/licenses/GPL-2.0
#
##############################################################################
"""
print random password
    arg: minimum amount of entropy (optional, default 128)
    chars: a-z, A-Z, 0-9; exclude: 0, O, l, 1, I; total: 57
    length: calculated from entropy arg, or 22 chars for default
"""

from sys import argv, stdout
from os import environ
from os.path import realpath, basename

from random import SystemRandom as Rng
from string import ascii_letters as letters
from string import digits

from math import ceil, log as ln

###

CHARSET = set(letters + digits) ^ set("0Ol1I")
ENTROPY_DEFAULT = 128

###

def usagex():
    print("{}:".format(invname), __doc__.strip())
    quit()

###

def passgen(random, charset, length):
    s = str()
    for _ in range(length):
        s += random.choice(list(charset))
    return s


def find_minlen(entropy):
    return ceil(entropy / (ln(len(CHARSET)) / ln(2)))

###

def main(minentropy):

    passlen = find_minlen(minentropy)

    rng = Rng()
    password = passgen(rng, CHARSET, passlen)

    print(password, end='')
    if (stdout.isatty()):
        print()


if (__name__ == "__main__"):

    try:
        if bool(environ['DEBUG']):
            from pprint import pprint as pp
            debug = True
            print('debug-mode-enabled', file=stderr)
        else:
            raise KeyError

    except KeyError:
        debug = False

    if debug: breakpoint()

    invname = basename(realpath(argv[0]))
    nargs = len(argv) - 1
    if nargs > 1: usagex()

    main(int(argv[1]) if nargs else ENTROPY_DEFAULT)

#
